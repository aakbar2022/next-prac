import { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from "@apollo/client";
import "bootstrap/dist/css/bootstrap.min.css";
import { Metadata, NextPage } from "next";
import { appWithTranslation } from "next-i18next";
import { AppProps } from "next/app";
import { ReactElement, ReactNode, useEffect } from "react";
import "react-photo-view/dist/react-photo-view.css";
import "../../assets/font/stylesheet.css";
import "../../styles/global.css";
import "../../styles/listStyles.css";
import "../../styles/stepper.css";

import { setContext } from '@apollo/client/link/context';

export type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {
  getLayout?: (page: ReactElement) => ReactNode;
};

type AppPropsWithLayout = AppProps & {
  Component: NextPageWithLayout;
};

const uri = 'http://10.10.10.200:5000/api';
// const uri = 'https://www.myhousingoptions.co.uk/api';

// Create a new HTTP link
const httpLink = createHttpLink({
  uri,
});

const authLink = setContext((_, { headers }) => {
  // const authToken = localStorage.getItem('authToken'); // Example: retrieve from localStorage
  return {
    headers: {
      ...headers,
      'Content-Type': 'application/json',
      'apollo-require-preflight': 'true',
      // Authorization: authToken ? `Bearer ${authToken}` : '',
    },
  };
});

// Create the Apollo Client instance
const client = new ApolloClient({
  link: authLink.concat(httpLink),
  cache: new InMemoryCache(),
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

function MyApp({ Component, pageProps }: AppPropsWithLayout) {
  useEffect(() => {
    require("bootstrap/dist/js/bootstrap.bundle.min.js");
  }, []);

  const getLayout = Component.getLayout ?? ((page) => page);
  return getLayout(
    <ApolloProvider client={client}>
      <Component {...pageProps} />
    </ApolloProvider>
  );
}

export default appWithTranslation(MyApp);
